# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxGMLL7nRXyJXwUGcQjYdrj08BXY_5NV
"""

from google.colab import drive
drive.mount('/content/drive')

from flask import Flask, request, jsonify
from PIL import Image
import numpy as np
import io
import pandas as pd
import csv
import os
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow import keras
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Import model
model = keras.models.load_model("/content/drive/MyDrive/final.h5")

def transform_image(img):
    img = img.resize((224, 224))
    img = img_to_array(img)
    img = img.astype(np.float32) / 255
    img = np.expand_dims(img, axis=0)
    return img

def predict(x):
    predictions = model.predict(x)
    return predictions

app = Flask(__name__)

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        file = request.files.get('file')
        if file is None or file.filename == "":
            return jsonify({"error": "No file provided"})
        try:
            # Daftar nama buah (sesuai dengan kelas model)
            class_names = ["Alpukat", "Anggur", "Apel", "Belimbing", "Buah Naga", "Durian", "Jambu", "Jeruk", "Kiwi", "Kurma", "Leci",
                           "Mangga", "Manggis", "Melon", "Nanas", "Nangka", "Pepaya", "Pir", "Pisang", "Rambutan", "Salak", "Sawo",
                           "Semangka", "Sirsak", "Stroberi", "Tomat"]

            # Proses gambar dan prediksi
            image_bytes = file.read()
            pillow_img = Image.open(io.BytesIO(image_bytes))
            predictions = predict(transform_image(pillow_img))
            predicted_class_index = tf.argmax(predictions[0]).numpy()
            predicted_class = class_names[predicted_class_index]

            # Membaca informasi gizi dari file CSV
            df = pd.read_csv("Informasi Gizi Buah.csv", sep=',')
            df['Bahan'] = df['Bahan'].str.strip()  # Menghapus spasi tambahan
            nutrient_info = df.loc[df['Bahan'] == predicted_class, [
                'Kalori', 'Lemak(g)', 'Karbohidrat(g)', 'Protein(g)', 'Ukuran', 'Keterangan']]

            # Konversi informasi gizi menjadi dictionary
            nutrient_info_dict = nutrient_info.to_dict(orient='records')

            # Respon yang dikembalikan
            response = {
                "predicted_fruit": predicted_class,
                "nutrient_info": nutrient_info_dict
            }
            return jsonify(response)
        except Exception as e:
            return jsonify({"error": str(e)})
    return "OK"

if __name__ == "__main__":
    app.run(port=4000, debug=True)